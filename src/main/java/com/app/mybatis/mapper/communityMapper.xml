<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="community">

	<!-- 최신순 정렬 + 해시태그 -->
	<select id="sortByLatestAndHashtag" parameterType="string" resultType="BoardViewDTO">
	    SELECT
	        P.ID AS postId,
	        P.BOARD_TITLE AS boardTitle,
	        P.BOARD_CONTENT AS boardContent,
	        P.BOARD_CONTENT_CREATE_DATE AS boardContentCreateDate,
	        P.BOARD_CONTENT_VIEWS AS boardContentViews,
	        P.BOARD_HASHTAG AS boardHashtag,
	        M.ID AS memberId,
	        M.MEMBER_NICKNAME AS memberNickname,
	        NVL(MI.MEMBER_IMG_NAME, 'default.png') AS memberProfileImgName,
	        NVL(MI.MEMBER_IMG_PATH, '/assets/images/mypage') AS memberProfileImgPath,
	        (SELECT COUNT(*) FROM TBL_BOARD_LIKE BL WHERE BL.BOARD_POST_ID = P.ID) AS likeCount,
	        (SELECT COUNT(*) FROM TBL_BOARD_COMMENT BC WHERE BC.BOARD_POST_ID = P.ID) AS commentCount,
	        NVL(BI.BOARD_IMG_PATH, '/assets/images/community') AS boardImgPath,
	        NVL(BI.BOARD_IMG_NAME, 'default.png') AS boardImgName
	    FROM TBL_BOARD_POST P
	    JOIN TBL_MEMBER M ON P.MEMBER_ID = M.ID
	    LEFT JOIN TBL_MEMBER_IMG MI ON M.ID = MI.MEMBER_ID
	    LEFT JOIN TBL_BOARD_IMG BI ON P.ID = BI.BOARD_POST_ID
	    WHERE (#{hashtag, jdbcType=VARCHAR} IS NULL OR P.BOARD_HASHTAG = #{hashtag, jdbcType=VARCHAR})
	    ORDER BY P.BOARD_CONTENT_CREATE_DATE DESC
	</select>
	
	<!-- 좋아요순 정렬 + 해시태그 -->
	<select id="sortByLikesAndHashtag" parameterType="string" resultType="BoardViewDTO">
	    SELECT
	        P.ID AS postId,
	        P.BOARD_TITLE AS boardTitle,
	        P.BOARD_CONTENT AS boardContent,
	        P.BOARD_CONTENT_CREATE_DATE AS boardContentCreateDate,
	        P.BOARD_CONTENT_VIEWS AS boardContentViews,
	        P.BOARD_HASHTAG AS boardHashtag,
	        M.ID AS memberId,
	        M.MEMBER_NICKNAME AS memberNickname,
	        NVL(MI.MEMBER_IMG_NAME, 'default.png') AS memberProfileImgName,
	        NVL(MI.MEMBER_IMG_PATH, '/assets/images/mypage') AS memberProfileImgPath,
	        (SELECT COUNT(*) FROM TBL_BOARD_LIKE BL WHERE BL.BOARD_POST_ID = P.ID) AS likeCount,
	        (SELECT COUNT(*) FROM TBL_BOARD_COMMENT BC WHERE BC.BOARD_POST_ID = P.ID) AS commentCount,
	        NVL(BI.BOARD_IMG_PATH, '/assets/images/community') AS boardImgPath,
	        NVL(BI.BOARD_IMG_NAME, 'default.png') AS boardImgName
	    FROM TBL_BOARD_POST P
	    JOIN TBL_MEMBER M ON P.MEMBER_ID = M.ID
	    LEFT JOIN TBL_MEMBER_IMG MI ON M.ID = MI.MEMBER_ID
	    LEFT JOIN TBL_BOARD_IMG BI ON P.ID = BI.BOARD_POST_ID
	    WHERE (#{hashtag, jdbcType=VARCHAR} IS NULL OR P.BOARD_HASHTAG = #{hashtag, jdbcType=VARCHAR})
	    ORDER BY likeCount DESC
	</select>
	
	<!-- 조회수순 정렬 + 해시태그 -->
	<select id="sortByViewsAndHashtag" parameterType="string" resultType="BoardViewDTO">
	    SELECT
	        P.ID AS postId,
	        P.BOARD_TITLE AS boardTitle,
	        P.BOARD_CONTENT AS boardContent,
	        P.BOARD_CONTENT_CREATE_DATE AS boardContentCreateDate,
	        P.BOARD_CONTENT_VIEWS AS boardContentViews,
	        P.BOARD_HASHTAG AS boardHashtag,
	        M.ID AS memberId,
	        M.MEMBER_NICKNAME AS memberNickname,
	        NVL(MI.MEMBER_IMG_NAME, 'default.png') AS memberProfileImgName,
	        NVL(MI.MEMBER_IMG_PATH, '/assets/images/mypage') AS memberProfileImgPath,
	        (SELECT COUNT(*) FROM TBL_BOARD_LIKE BL WHERE BL.BOARD_POST_ID = P.ID) AS likeCount,
	        (SELECT COUNT(*) FROM TBL_BOARD_COMMENT BC WHERE BC.BOARD_POST_ID = P.ID) AS commentCount,
	        NVL(BI.BOARD_IMG_PATH, '/assets/images/community') AS boardImgPath,
	        NVL(BI.BOARD_IMG_NAME, 'default.png') AS boardImgName
	    FROM TBL_BOARD_POST P
	    JOIN TBL_MEMBER M ON P.MEMBER_ID = M.ID
	    LEFT JOIN TBL_MEMBER_IMG MI ON M.ID = MI.MEMBER_ID
	    LEFT JOIN TBL_BOARD_IMG BI ON P.ID = BI.BOARD_POST_ID
	    WHERE (#{hashtag, jdbcType=VARCHAR} IS NULL OR P.BOARD_HASHTAG = #{hashtag, jdbcType=VARCHAR})
	    ORDER BY P.BOARD_CONTENT_VIEWS DESC
	</select>
	<select id="selectAllBoardPost" resultType="BoardViewDTO">
		SELECT
		P.ID AS postId,
		P.BOARD_TITLE AS boardTitle,
		P.BOARD_CONTENT AS boardContent,
		P.BOARD_CONTENT_CREATE_DATE AS boardContentCreateDate,
		P.BOARD_CONTENT_VIEWS AS boardContentViews,
		P.BOARD_HASHTAG AS
		boardHashtag,
		M.ID AS memberId,
		M.MEMBER_NICKNAME AS memberNickname,
		NVL(MI.MEMBEgiR_IMG_NAME, 'default.png') AS memberProfileImgName,
		NVL(MI.MEMBER_IMG_PATH, '/assets/images/mypage') AS
		memberProfileImgPath,
		(SELECT COUNT(*) FROM TBL_BOARD_LIKE BL WHERE
		BL.BOARD_POST_ID = P.ID) AS
		likeCount,
		(SELECT COUNT(*) FROM
		TBL_BOARD_COMMENT BC WHERE BC.BOARD_POST_ID = P.ID) AS
		commentCount,
		NVL(BI.BOARD_IMG_PATH, 'default.png') AS boardImgPath,
		NVL(BI.BOARD_IMG_NAME, '/assets/images/community') AS boardImgName
		FROM TBL_BOARD_POST P
		JOIN TBL_MEMBER M ON P.MEMBER_ID = M.ID
		LEFT JOIN
		TBL_MEMBER_IMG MI ON M.ID = MI.MEMBER_ID
		LEFT JOIN TBL_BOARD_IMG BI ON
		P.ID = BI.BOARD_POST_ID
		ORDER BY P.BOARD_CONTENT_CREATE_DATE DESC
	</select>

	<select id="sortByLikes" resultType="BoardViewDTO">
		SELECT
		P.ID AS postId,
		P.BOARD_TITLE AS boardTitle,
		P.BOARD_CONTENT AS boardContent,
		P.BOARD_CONTENT_CREATE_DATE AS boardContentCreateDate,
		P.BOARD_CONTENT_VIEWS AS boardContentViews,
		P.BOARD_HASHTAG AS
		boardHashtag,
		M.ID AS memberId,
		M.MEMBER_NICKNAME AS memberNickname,
		NVL(MI.MEMBER_IMG_NAME, 'default.png') AS memberProfileImgName,
		NVL(MI.MEMBER_IMG_PATH, '/assets/images/mypage') AS
		memberProfileImgPath,
		(SELECT COUNT(*) FROM TBL_BOARD_LIKE WHERE
		BOARD_POST_ID = P.ID) AS
		likeCount,
		(SELECT COUNT(*) FROM
		TBL_BOARD_COMMENT WHERE BOARD_POST_ID = P.ID) AS
		commentCount,
		NVL(BI.BOARD_IMG_NAME, 'default.png') AS boardImgName,
		NVL(BI.BOARD_IMG_PATH, '/assets/images/community') AS boardImgPath
		FROM TBL_BOARD_POST P
		JOIN TBL_MEMBER M ON P.MEMBER_ID = M.ID
		LEFT JOIN
		TBL_MEMBER_IMG MI ON M.ID = MI.MEMBER_ID
		LEFT JOIN TBL_BOARD_IMG BI ON
		P.ID = BI.BOARD_POST_ID
		ORDER BY likeCount DESC
	</select>

	<select id="sortByViews" resultType="BoardViewDTO">
		SELECT
		P.ID AS postId,
		P.BOARD_TITLE AS boardTitle,
		P.BOARD_CONTENT AS boardContent,
		P.BOARD_CONTENT_CREATE_DATE AS boardContentCreateDate,
		P.BOARD_CONTENT_VIEWS AS boardContentViews,
		P.BOARD_HASHTAG AS
		boardHashtag,
		M.ID AS memberId,
		M.MEMBER_NICKNAME AS memberNickname,
		NVL(MI.MEMBER_IMG_NAME, 'default.png') AS memberProfileImgName,
		NVL(MI.MEMBER_IMG_PATH, '/assets/images/mypage') AS
		memberProfileImgPath,
		(SELECT COUNT(*) FROM TBL_BOARD_LIKE WHERE
		BOARD_POST_ID = P.ID) AS
		likeCount,
		(SELECT COUNT(*) FROM
		TBL_BOARD_COMMENT WHERE BOARD_POST_ID = P.ID) AS
		commentCount,
		NVL(BI.BOARD_IMG_NAME, 'default.png') AS boardImgName,
		NVL(BI.BOARD_IMG_PATH, '/assets/images/community') AS boardImgPath
		FROM TBL_BOARD_POST P
		JOIN TBL_MEMBER M ON P.MEMBER_ID = M.ID
		LEFT JOIN
		TBL_MEMBER_IMG MI ON M.ID = MI.MEMBER_ID
		LEFT JOIN TBL_BOARD_IMG BI ON
		P.ID = BI.BOARD_POST_ID
		ORDER BY P.BOARD_CONTENT_VIEWS DESC
	</select>
<select id="getNextPostId" resultType="long">
		SELECT SEQ_BOARD_POST.NEXTVAL FROM DUAL
	</select>
	<insert id="insertPost" parameterType="BoardPostVO">
		INSERT INTO TBL_BOARD_POST (
		ID,
		BOARD_TITLE,
		BOARD_CONTENT,
		BOARD_CONTENT_CREATE_DATE,
		BOARD_CONTENT_UPDATE_DATE,
		BOARD_HASHTAG,
		MEMBER_ID
		) VALUES (
		#{id},
		#{boardTitle},
		#{boardContent},
		SYSTIMESTAMP,
    	SYSTIMESTAMP,
		#{boardHashtag},
		#{memberId}
		)
	</insert>
	<insert id="insertBoardImg" parameterType="BoardImgVO">
		INSERT INTO
		TBL_BOARD_IMG (
		ID,
		BOARD_IMG_PATH,
		BOARD_IMG_NAME,
		BOARD_POST_ID
		) VALUES
		(
		SEQ_BOARD_IMG.NEXTVAL,
		#{boardImgPath},
		#{boardImgName},
		#{boardPostId}
		)
	</insert>
	
	<!-- 게시물 단일 조회 -->
	<select id="readPost" parameterType="Long" resultType="BoardPostViewDTO">
		SELECT
			TBP.ID,
			TBP.BOARD_TITLE,
			TBP.BOARD_CONTENT,
			TBP.BOARD_CONTENT_CREATE_DATE,
			TBP.MEMBER_ID,
			TM.MEMBER_NICKNAME,
			TBP.BOARD_CONTENT_VIEWS,
		    (SELECT COUNT(*) FROM TBL_BOARD_LIKE TBL WHERE TBL.BOARD_POST_ID = TBP.ID) AS LIKE_COUNT,
		    (SELECT COUNT(*) FROM TBL_BOARD_COMMENT TBC WHERE TBC.BOARD_POST_ID = TBP.ID) AS COMMENT_COUNT
		FROM TBL_BOARD_POST TBP
		JOIN TBL_MEMBER TM ON TBP.MEMBER_ID = TM.ID AND TBP.ID = #{id}
	</select>
	
	<!-- 게시물 이미지 조회 -->
	<select id="readPostImg" parameterType="Long" resultType="BoardImgVO">
		SELECT *
		FROM TBL_BOARD_IMG
		WHERE BOARD_POST_ID = #{id}
	</select>
	
	<!-- 게시물 좋아요 생성 -->
	<insert id="insertLike" parameterType="BoardLikeVO">
	    INSERT INTO TBL_BOARD_LIKE (ID, MEMBER_ID, BOARD_POST_ID)
	    VALUES (SEQ_BOARD_LIKE.NEXTVAL, #{memberId}, #{boardPostId})
	</insert>
	
	<!-- 게시물 좋아요 삭제 -->
	<delete id="deleteLike" parameterType="Long">
    	DELETE FROM TBL_BOARD_LIKE 
    	WHERE ID = #{id}
	</delete>
	
	<!-- 게시물 좋아요 조회 -->
	<select id="selectPostLike" resultType="BoardLikeVO" parameterType="BoardLikeVO">
		SELECT *
		FROM TBL_BOARD_LIKE
		WHERE BOARD_POST_ID = #{boardPostId} AND MEMBER_ID = #{memberId}
	</select>
	<!-- 게시물 좋아요 아이디 조회 -->
	<select id="selectPostLikeId" resultType="BoardLikeVO" parameterType="Long">
		SELECT *
		FROM TBL_BOARD_LIKE
		WHERE ID = #{id}
	</select>
	<!-- 댓글 작성 -->
	<insert id="insertPostComment" parameterType="BoardCommentVO">
		INSERT INTO TBL_BOARD_COMMENT (ID, BOARD_COMMENT_CONTENT, MEMBER_ID, BOARD_POST_ID)
		VALUES (SEQ_BOARD_COMMENT.NEXTVAL, #{boardCommentContent}, #{memberId}, #{boardPostId})
	</insert>
	
	<!-- 댓글 조회 -->
	<select id="selectCommentList" resultType="BoardCommentViewDTO" parameterType="Long">
		SELECT 
		    TBC.ID,
		    TBC.BOARD_POST_ID,
		    TBC.MEMBER_ID,
		    TM.MEMBER_NICKNAME,
		    TBC.BOARD_COMMENT_CONTENT,
		    TBC.BOARD_COMMENT_CREATE_DATE,
		    (
		        SELECT COUNT(*) 
		        FROM TBL_BOARD_COMMENT_LIKE TBCL 
		        WHERE TBCL.BOARD_COMMENT_ID = TBC.ID
		    ) AS LIKE_COUNT
		FROM TBL_BOARD_COMMENT TBC
		JOIN TBL_MEMBER TM ON TBC.MEMBER_ID = TM.ID
		WHERE TBC.BOARD_POST_ID = #{id}
		ORDER BY TBC.BOARD_COMMENT_CREATE_DATE DESC
	</select>
	
</mapper>